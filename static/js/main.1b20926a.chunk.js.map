{"version":3,"sources":["models/Car.js","models/POIpoint.js","models/Carpark.js","components/Map.js","components/MapFilters.js","App.js","serviceWorker.js","index.js"],"names":["Car","data","Object","assign","this","POIpoint","Carpark","Map","props","_map","useRef","_markers","_markersPOI","_markersCarpark","_map_bounds","_map_city","useEffect","current","L","map","center","zoom","layers","tileLayer","attribution","markerClusterGroup","disableClusteringAtZoom","addTo","layerGroup","carParkPoints","clearLayers","forEach","el","idx","arr","point","marker","location","latitude","longitude","icon","iconUrl","iconSize","popupAnchor","bindPopup","name","spacesCount","formatPopup","addLayer","POIpoints","getIcon","category","categoryIcon","points","car","fitBounds","centerOncity","panTo","setZoom","status","carType","statusFolder","iconName","type","platesNumber","batteryLevelPct","id","MapFilters","onChangeFilter","React","useState","fltBatteryPercentage","setFltBatteryPercentage","fltStatus","setFltStatus","fltCarparks","setFltCarparks","fltPOI","setFltPOI","fltCity","setFltCity","batteryPercentage","poi","carparks","city","setFltBattery","val","newVal","className","htmlFor","onChange","e","target","value","onClick","range","defaultValue","min","max","step","checked","handlePoiChange","handleCarparksChange","App","cars","setCars","fCars","setFCars","filter","setFilter","POI","setPOI","fPOI","setFPOI","setCarparks","fCarparks","setFCarparks","sidebarClass","setSidebarClass","filteredCars","RegExp","test","axios","get","then","objects","preventDefault","mapFilter","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uWAwCeA,EAJX,WAAYC,GAAM,oBACdC,OAAOC,OAAOC,KAAMH,ICRbI,EAJX,WAAYJ,GAAM,oBACdC,OAAOC,OAAOC,KAAMH,ICKbK,EAJX,WAAYL,GAAM,oBACdC,OAAOC,OAAOC,KAAMH,ICsIbM,G,kBAzJH,SAACC,GACT,IAAMC,EAAOC,iBAAO,GACdC,EAAWD,iBAAO,GAClBE,EAAcF,iBAAO,GACrBG,EAAkBH,iBAAO,GACzBI,EAAcJ,kBAAO,GACrBK,EAAYL,kBAAO,GA+IzB,OA9IAM,qBAAU,WACNP,EAAKQ,QAAUC,IAAEC,IAAI,MAAO,CACxBC,OAAQ,CAAC,WAAW,YACpBC,KAAM,GACNC,OAAQ,CACJJ,IAAEK,UAAU,0CAA2C,CACnDC,YACA,iFAOZb,EAASM,QAAiBC,IAAEO,mBAHL,CACnBC,wBAAyB,KAEkCC,MAAMlB,EAAKQ,SAC1EL,EAAYK,QAAcC,IAAEU,aAAaD,MAAMlB,EAAKQ,SACpDJ,EAAgBI,QAAUC,IAAEU,aAAaD,MAAMlB,EAAKQ,WACrD,IAEHD,qBAAU,WACN,GAAGR,EAAMqB,cAAc,CAiBnBhB,EAAgBI,QAAQa,cACxBtB,EAAMqB,cAAcE,SAAQ,SAACC,EAAIC,EAAKC,GAClC,IAAMC,EAAQ,IAAI7B,EAAQ0B,GACtBI,EAASlB,IAAEkB,OAAO,CAACD,EAAME,SAASC,SAAUH,EAAME,SAASE,WAAY,CAACC,KAhBrEtB,IAAEsB,KAAK,CACVC,QAAS,6CACTC,SAAc,CAAC,GAAI,IACnBC,YAAc,CAAC,GAAI,QActBC,UAPa,SAACT,GACf,MAAM,UAAN,OAAiBA,EAAMU,KAAvB,yBAA4CV,EAAMW,YAAlD,wBAA6EX,EAAME,SAASC,SAA5F,aAAyGH,EAAME,SAASE,UAAxH,WAMWQ,CAAYZ,IACvBtB,EAAgBI,QAAQ+B,SAASZ,WAGrCvB,EAAgBI,QAAQa,gBAG9B,CAACtB,EAAMqB,gBAETb,qBAAU,WACN,GAAGR,EAAMyC,UAAU,CAEf,IAAIC,EAAU,SAACC,GACX,IACIC,EAAe,cACnB,OAAQD,GACJ,IAAK,kBACDC,EAAe,YACf,MACJ,IAAK,WACDA,EAAe,cACf,MACJ,QACIA,EAAe,cAEvB,OAAOlC,IAAEsB,KAAK,CACVC,QAAS,qBAAoCW,EAC7CV,SAAc,CAAC,GAAI,IACnBC,YAAc,CAAC,GAAI,OAU3B/B,EAAYK,QAAQa,cACpBtB,EAAMyC,UAAUlB,SAAQ,SAACC,EAAIC,EAAKC,GAC9B,IAAMC,EAAQ,IAAI9B,EAAS2B,GACvBI,EAASlB,IAAEkB,OAAO,CAACD,EAAME,SAASC,SAAUH,EAAME,SAASE,WAAY,CAACC,KAAMU,EAAQf,EAAMgB,YAC/FP,UAPa,SAACT,GACf,MAAM,UAAN,OAAiBA,EAAMU,KAAvB,sBAAyCV,EAAMgB,SAA/C,wBAAuEhB,EAAME,SAASC,SAAtF,aAAmGH,EAAME,SAASE,UAAlH,WAMWQ,CAAYZ,IACvBvB,EAAYK,QAAQ+B,SAASZ,WAGjCxB,EAAYK,QAAQa,gBAG1B,CAACtB,EAAMyC,YAETjC,qBAAU,WAEFF,EAAYG,UACZH,EAAYG,QAAUT,EAAM6C,OAAOlC,KAAI,SAAUmC,GAC7C,MAAO,CAACA,EAAIjB,SAASC,SAAUgB,EAAIjB,SAASE,cAEhD9B,EAAKQ,QAAQsC,UAAUzC,EAAYG,UAEpCT,EAAMgD,cACFzC,EAAUE,UAAYT,EAAMgD,eAED,aAAvBhD,EAAMgD,cACL/C,EAAKQ,QAAQwC,MAAM,CAAC,WAAW,aAC/BhD,EAAKQ,QAAQyC,QAAQ,IACrB3C,EAAUE,QAAU,aAGpBR,EAAKQ,QAAQwC,MAAM,CAAC,WAAW,aAC/BhD,EAAKQ,QAAQyC,QAAQ,IACrB3C,EAAUE,QAAU,YAKhC,IAAIiC,EAAU,SAACS,EAAQC,GACnB,IAAIC,EAA2B,cAAXF,EAA0B,UAAY,SACtDG,EAAwB,UAAZF,EAAuB,aAAe,UACtD,OAAO1C,IAAEsB,KAAK,CACVC,QAAS,aAAeoB,EAAe,IAAMC,EAC7CpB,SAAc,CAAC,GAAI,IACnBC,YAAc,CAAC,GAAI,OAU3BhC,EAASM,QAAQa,cACjBtB,EAAM6C,OAAOtB,SAAQ,SAACC,EAAIC,EAAKC,GAC3B,IAAMoB,EAAM,IAAItD,EAAIgC,GAChBI,EAASlB,IAAEkB,OAAO,CAACkB,EAAIjB,SAASC,SAAUgB,EAAIjB,SAASE,WAAY,CAACC,KAAMU,EAAQI,EAAIK,OAAQL,EAAIS,QACrGnB,UAPa,SAACU,GACf,MAAM,OAAN,OAAcA,EAAIS,KAAlB,YAA0BT,EAAIU,aAA9B,2BAA6DV,EAAIW,gBAAjE,0BAAkGX,EAAIK,OAAtG,wBAA4HL,EAAIjB,SAASC,SAAzI,aAAsJgB,EAAIjB,SAASE,UAAnK,WAMWQ,CAAYO,IACvB3C,EAASM,QAAQ+B,SAASZ,QAGhC,CAAC5B,EAAM6C,OAAQ7C,EAAMgD,eAEhB,yBAAKU,GAAG,UC7DJC,EAhGI,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAAoB,EACmBC,IAAMC,SAAS,IADlC,mBAC9BC,EAD8B,KACRC,EADQ,OAEHH,IAAMC,SAAS,GAFZ,mBAE9BG,EAF8B,KAEnBC,EAFmB,OAGCL,IAAMC,UAAS,GAHhB,mBAG9BK,EAH8B,KAGjBC,EAHiB,OAITP,IAAMC,UAAS,GAJN,mBAI9BO,EAJ8B,KAItBC,EAJsB,OAKPT,IAAMC,SAAS,WALR,mBAK9BS,EAL8B,KAKrBC,EALqB,KAOrChE,qBAAU,WAENoD,EAAe,CAACa,kBAAmBV,EAAsBZ,OAAQc,EAAWS,IAAKL,EAAQM,SAAUR,EAAaS,KAAML,MACvH,CAACN,EAAWF,EAAsBM,EAAQF,EAAaI,EAASX,IAEnE,IAAMiB,EAAgB,SAACC,GACnB,IACIC,EAAShB,EAAuBe,EAChCC,GAFmB,GAEFA,GAFT,KAGRf,EAAwBe,IAwBhC,OACI,yBAAKC,UAAU,cACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,wBACX,wBAAIA,UAAU,QAAd,eAEJ,yBAAKA,UAAU,wBACX,2BAAOC,QAAQ,sBAAf,UACA,4BAAQD,UAAU,gBAAgBtB,GAAG,qBAAqBwB,SAbxD,SAACC,GACnBX,EAAWW,EAAEC,OAAOC,QAY+EA,MAAOd,GACtF,4BAAQc,MAAM,WAAd,gBACA,4BAAQA,MAAM,YAAd,cAGR,yBAAKL,UAAU,wBACX,4DACA,yBAAKA,UAAU,eACX,yBAAKA,UAAU,gBAAgBjB,GAC/B,yBAAKiB,UAAU,sBACX,0BAAMA,UAAU,oBAAhB,KACA,4BAAQA,UAAU,4BAA4BM,QAAS,kBAAMT,EAAc,IAAKtB,KAAK,UAArF,OACA,4BAAQyB,UAAU,4BAA4BM,QAAS,kBAAMT,GAAe,IAAItB,KAAK,UAArF,QAEJ,2BAAOA,KAAK,QAAQyB,UAAU,eAAeE,SA5CxC,SAACC,GAC1B,IAAMI,EAAQJ,EAAEC,OAAOC,MACvBrB,EAAwBuB,IA0CyEC,aAAczB,EAAsB0B,IAAI,IAAIC,IAAI,MAAMC,KAAK,IAAIjC,GAAG,mBAGvJ,yBAAKsB,UAAU,wBACX,2BAAOC,QAAQ,sBAAf,2CACA,4BAAQD,UAAU,gBAAgBtB,GAAG,qBAAqBwB,SApCtD,SAACC,GACrBjB,EAAaiB,EAAEC,OAAOC,QAmC+EA,MAAOpB,GACxF,4BAAQoB,MAAM,aAAd,iBACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,KAAd,eAGR,yBAAKL,UAAU,wBACX,yBAAKA,UAAU,gCACX,2BAAOA,UAAU,uBAAuBE,SAAU,SAAAC,GAAC,OApDnD,SAACA,GACrBb,EAAUa,EAAEC,OAAOQ,SAmDwDC,CAAgBV,IAAI5B,KAAK,WAAWG,GAAG,aAC9F,2BAAOsB,UAAU,uBAAuBC,QAAQ,YAAhD,6BAKR,yBAAKD,UAAU,wBACX,yBAAKA,UAAU,gCACX,2BAAOA,UAAU,uBAAuBE,SAAU,SAAAC,GAAC,OAxD9C,SAACA,GAC1Bf,EAAee,EAAEC,OAAOQ,SAuDmDE,CAAqBX,IAAI5B,KAAK,WAAWG,GAAG,kBACnG,2BAAOsB,UAAU,uBAAuBC,QAAQ,iBAAhD,8B,oCCSbc,MAnFf,WAAgB,IAAD,EACajC,qBADb,mBACJkC,EADI,KACEC,EADF,OAEenC,qBAFf,mBAEJoC,EAFI,KAEGC,EAFH,OAGiBrC,mBAAS,CAAEW,mBAAmB,EAAOtB,OAAQ,EAAGwB,UAAU,EAAOD,KAAK,EAAOE,KAAM,YAHpG,mBAGJwB,EAHI,KAGIC,EAHJ,OAIWvC,qBAJX,mBAIJwC,EAJI,KAICC,EAJD,OAKazC,qBALb,mBAKJ0C,EALI,KAKEC,EALF,OAMqB3C,qBANrB,mBAMJa,EANI,KAMM+B,EANN,OAOuB5C,qBAPvB,mBAOJ6C,EAPI,KAOOC,EAPP,OAQ6B9C,mBAAS,QARtC,mBAQJ+C,EARI,KAQUC,EARV,KA8DX,OApDAtG,qBAAU,WACN,IAAIuG,EAAef,GAGc,IAA7BI,EAAO3B,mBAA+BuB,IACtCe,EAAeA,EAAaX,QAExB,SAAUtD,GACN,OAAOA,EAAIW,iBAAmB2C,EAAO3B,sBAK7C2B,EAAOjD,QAA4B,MAAlBiD,EAAOjD,QAAkB6C,IAC1Ce,EAAeA,EAAaX,QAExB,SAAUtD,GAEN,OADc,IAAIkE,OAAO,IAAMZ,EAAOjD,OAAS,KAChC8D,KAAKnE,EAAIK,YAKpCyD,IAAgBR,EAAOzB,UAAoBA,GAG3C8B,IAAWL,EAAO1B,KAAe4B,GAE7BS,GACAZ,EAASY,KAGd,CAACX,EAAQE,EAAK3B,EAAUqB,IAE3BxF,qBAAU,WAIN0G,IAAMC,IAHsF,uEAGpEC,MAAK,YAAe,IAAZ3H,EAAW,EAAXA,KAAa0G,EAAS1G,EAAK4H,SAAUpB,EAAQxG,EAAK4H,YAClFH,IAAMC,IAFoF,sEAEnEC,MAAK,YAAe,IAAZ3H,EAAW,EAAXA,KAAagH,EAAQhH,EAAK4H,SAAUd,EAAO9G,EAAK4H,YAC/EH,IAAMC,IAJ8F,2EAIxEC,MAAK,YAAe,IAAZ3H,EAAW,EAAXA,KAAamH,EAAanH,EAAK4H,SAAUX,EAAYjH,EAAK4H,cAC/F,IAWIrB,EACH,yBAAKhB,UAAU,UACX,yBAAKA,UAAW,kBAAkB6B,GAC9B,yBAAK7B,UAAW,kBAAkB6B,GAC9B,kBAAC,EAAD,CAAYjD,eAAgByC,KAEhC,yBAAKrB,UAAU,mBACX,yBAAKA,UAAU,iBACX,yBAAKtB,GAAG,SAASsB,UAAW6B,EAAcvB,QAjBxC,SAACH,GACnBA,EAAEmC,iBAEER,EADiB,KAAjBD,EACgB,OAEA,MAY8D,yBAAK7B,UAAU,kBAI7F,yBAAKA,UAAW,kBAAkB6B,GAC9B,kBAAC,EAAD,CAAKhE,OAAQqD,EAAOlD,aAAcoD,EAAOxB,KAAMvD,cAAesF,EAAWlE,UAAW+D,EAAMe,UAAWnB,MAI7G,4CC/EYoB,QACW,cAA7BC,OAAO5F,SAAS6F,UAEe,UAA7BD,OAAO5F,SAAS6F,UAEhBD,OAAO5F,SAAS6F,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.1b20926a.chunk.js","sourcesContent":["class Car {\r\n    discriminator;\r\n    platesNumber;        \r\n    sideNumber;\r\n    color;\r\n    type;\r\n    picture;\r\n    // picture = {\r\n    //     id,\r\n    //     name,\r\n    //     extension,\r\n    //     contentType,\r\n    // };\r\n    rangeKm;\r\n    batteryLevelPct;\r\n    reservationEnd;\r\n    reservation;\r\n    status;\r\n    locationDescription;\r\n    address;\r\n    mapColor;\r\n    // mapColor = {\r\n    //     rgb,\r\n    //     alpha,\r\n    // };\r\n    promotion;\r\n    id;\r\n    name;\r\n    description;\r\n    location;\r\n    // location = {\r\n    //     latitude,\r\n    //     longitude,\r\n    // };\r\n    metadata;\r\n\r\n    constructor(data){\r\n        Object.assign(this, data);\r\n    }\r\n}\r\nexport default Car;","class POIpoint {\r\n    discriminator;\r\n    id;\r\n    name;\r\n    description;\r\n    location;\r\n    // location = {\r\n    //     latitude,\r\n    //     longitude,\r\n    // };\r\n    metadata;\r\n    address;\r\n    // address = {\r\n    //     street,\r\n    //     house,\r\n    //     city,\r\n    // };\r\n    category;\r\n    picture;\r\n    color;\r\n    // color = {\r\n    //     rgb,\r\n    //     alpha,\r\n    // };\r\n\r\n    constructor(data){\r\n        Object.assign(this, data);\r\n    }\r\n}\r\nexport default POIpoint;","class Carpark {\r\n    discriminator;\r\n    address;\r\n    // this.address = {\r\n    //     street,\r\n    //     house,\r\n    //     city,\r\n    // };\r\n    spacesCount;        \r\n    availableSpacesCount;\r\n    chargers;\r\n    color;\r\n    // color = {\r\n    //     rgb,\r\n    //     alpha,\r\n    // };\r\n    pictureId;\r\n    id;\r\n    name;\r\n    description;\r\n    location;\r\n    // location = {\r\n    //     latitude,\r\n    //     longitude,\r\n    // };\r\n    metadata;\r\n    \r\n    constructor(data){\r\n        Object.assign(this, data);\r\n    }\r\n}\r\nexport default Carpark;","import React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport Car from '../models/Car';\r\nimport POIpoint from '../models/POIpoint';\r\nimport Carpark from '../models/Carpark';\r\nimport 'leaflet.markercluster/dist/leaflet.markercluster';\r\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\r\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\r\n\r\nconst Map = (props) => {\r\n    const _map = useRef(0);\r\n    const _markers = useRef(0);\r\n    const _markersPOI = useRef(0);\r\n    const _markersCarpark = useRef(0);\r\n    const _map_bounds = useRef(false);\r\n    const _map_city = useRef(false);\r\n    useEffect(() => {\r\n        _map.current = L.map('map', {\r\n            center: [51.1089776,17.0326689],\r\n            zoom: 10,\r\n            layers: [\r\n                L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {\r\n                    attribution:\r\n                    '&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                }),\r\n            ]\r\n        })\r\n        const clusterOptions = {\r\n            disableClusteringAtZoom: 12\r\n        }\r\n        _markers.current        = L.markerClusterGroup(clusterOptions).addTo(_map.current);\r\n        _markersPOI.current     = L.layerGroup().addTo(_map.current);\r\n        _markersCarpark.current = L.layerGroup().addTo(_map.current);\r\n    }, []);\r\n\r\n    useEffect(() =>{\r\n        if(props.carParkPoints){\r\n            let getIcon = () => {\r\n                let statusFolder = 'warning';\r\n                let iconName = 'parking-meter-export.png';\r\n                return L.icon({\r\n                    iconUrl: 'icons/map/' + statusFolder + '/' + iconName,\r\n                    iconSize:     [32, 37], \r\n                    popupAnchor:  [0, -16]\r\n                });\r\n            }\r\n\r\n            /**\r\n             * @param {Carpark} point - Carpark Object\r\n             */\r\n            let formatPopup = (point) => {\r\n                return `Nazwa: ${point.name} <br />Miejsc:${point.spacesCount} <br />GPS: [${point.location.latitude}, ${point.location.longitude}]<br />`;\r\n            }\r\n            _markersCarpark.current.clearLayers();\r\n            props.carParkPoints.forEach((el, idx, arr) => {\r\n                const point = new Carpark(el);\r\n                let marker = L.marker([point.location.latitude, point.location.longitude], {icon: getIcon() })\r\n                .bindPopup(formatPopup(point));\r\n                _markersCarpark.current.addLayer(marker);\r\n            })\r\n        } else {\r\n            _markersCarpark.current.clearLayers();\r\n        }\r\n\r\n    },[props.carParkPoints])\r\n\r\n    useEffect(() =>{\r\n        if(props.POIpoints){\r\n            \r\n            let getIcon = (category) => {\r\n                let statusFolder = 'primary';\r\n                let categoryIcon = 'caution.png';\r\n                switch (category) {\r\n                    case 'Stacje kolejowe':\r\n                        categoryIcon = 'train.png';\r\n                        break;\r\n                    case 'Krasnale':\r\n                        categoryIcon = 'flagman.png';\r\n                        break;\r\n                    default:\r\n                        categoryIcon = 'caution.png';\r\n                }            \r\n                return L.icon({\r\n                    iconUrl: 'icons/map/' + statusFolder + '/' + categoryIcon,\r\n                    iconSize:     [32, 37], \r\n                    popupAnchor:  [0, -16]\r\n                });\r\n            }\r\n\r\n            /**\r\n             * @param {POIpoint} point - Car Object\r\n             */\r\n            let formatPopup = (point) => {\r\n                return `Nazwa: ${point.name} <br />Typ:${point.category} <br />GPS: [${point.location.latitude}, ${point.location.longitude}]<br />`;\r\n            }\r\n            _markersPOI.current.clearLayers();\r\n            props.POIpoints.forEach((el, idx, arr) => {\r\n                const point = new POIpoint(el);\r\n                let marker = L.marker([point.location.latitude, point.location.longitude], {icon: getIcon(point.category) })\r\n                .bindPopup(formatPopup(point));\r\n                _markersPOI.current.addLayer(marker);\r\n            })\r\n        } else {\r\n            _markersPOI.current.clearLayers();\r\n        }\r\n\r\n    },[props.POIpoints])\r\n\r\n    useEffect(() => {\r\n\r\n        if(!_map_bounds.current){\r\n            _map_bounds.current = props.points.map(function (car) {\r\n                return [car.location.latitude, car.location.longitude];\r\n            });\r\n            _map.current.fitBounds(_map_bounds.current);\r\n        }\r\n        if(props.centerOncity){\r\n            if(_map_city.current !== props.centerOncity){\r\n\r\n                if(props.centerOncity === 'warszawa'){\r\n                    _map.current.panTo([52.2319237,21.0067265]);\r\n                    _map.current.setZoom(11);\r\n                    _map_city.current = 'warszawa';\r\n                } else {\r\n                    // wroclaw\r\n                    _map.current.panTo([51.1089776,17.0326689]);\r\n                    _map.current.setZoom(11);\r\n                    _map_city.current = 'wroclaw';\r\n                }\r\n            }\r\n        }\r\n\r\n        let getIcon = (status, carType) => {\r\n            let statusFolder = (status === 'AVAILABLE') ? 'success' : 'danger';\r\n            let iconName = (carType === 'TRUCK') ? 'truck3.png' : 'car.png';\r\n            return L.icon({\r\n                iconUrl: 'icons/map/' + statusFolder + '/' + iconName,\r\n                iconSize:     [32, 37], \r\n                popupAnchor:  [0, -16]\r\n            });\r\n        }\r\n\r\n        /**\r\n         * @param {Car} car - Car Object\r\n         */\r\n        let formatPopup = (car) => {\r\n            return `Typ:${car.type} ${car.platesNumber} <br />Bateria: ${car.batteryLevelPct}<br /> Status: ${car.status} <br />GPS: [${car.location.latitude}, ${car.location.longitude}]<br />`;\r\n        }\r\n        _markers.current.clearLayers();\r\n        props.points.forEach((el, idx, arr) => {\r\n            const car = new Car(el);\r\n            let marker = L.marker([car.location.latitude, car.location.longitude], {icon: getIcon(car.status, car.type) })\r\n            .bindPopup(formatPopup(car));\r\n            _markers.current.addLayer(marker);\r\n        })\r\n\r\n    },[props.points, props.centerOncity]);\r\n\r\n    return <div id=\"map\"></div>\r\n\r\n}\r\n\r\nexport default Map;","import React, { useEffect } from 'react';\r\nconst MapFilters = ({onChangeFilter}) => {\r\n    const [fltBatteryPercentage, setFltBatteryPercentage] = React.useState(97);\r\n    const [fltStatus, setFltStatus] = React.useState(0);\r\n    const [fltCarparks, setFltCarparks] = React.useState(false);\r\n    const [fltPOI, setFltPOI] = React.useState(false);\r\n    const [fltCity, setFltCity] = React.useState('wroclaw');\r\n\r\n    useEffect(() => {\r\n        // console.log(`[CarFlt] Status: ${fltStatus}, Battery: ${fltBatteryPercentage}%`);\r\n        onChangeFilter({batteryPercentage: fltBatteryPercentage, status: fltStatus, poi: fltPOI, carparks: fltCarparks, city: fltCity})\r\n    }, [fltStatus, fltBatteryPercentage, fltPOI, fltCarparks, fltCity, onChangeFilter]);\r\n\r\n    const setFltBattery = (val) => {\r\n        const max = 100, min = 0,\r\n            newVal = fltBatteryPercentage + val;\r\n        if (newVal >= min && newVal <= max) {\r\n            setFltBatteryPercentage(newVal);\r\n        }\r\n    }\r\n    const onBatteryRangeChange = (e) => {\r\n        const range = e.target.value;\r\n        setFltBatteryPercentage(range);\r\n    }\r\n\r\n    const handlePoiChange = (e) => {\r\n        setFltPOI(e.target.checked);\r\n    }\r\n\r\n    const handleCarparksChange = (e) => {\r\n        setFltCarparks(e.target.checked);\r\n    }\r\n\r\n    const changeFltStatus = (e) => {\r\n        setFltStatus(e.target.value);\r\n    }\r\n\r\n    const changeFltCity = (e) => {\r\n        setFltCity(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"map-filter\">\r\n            <div className=\"container\">\r\n                <div className=\"form-row\">\r\n                    <div className=\"form-group col-md-12\">\r\n                        <h4 className=\"mt-3\">Ustawienia</h4>\r\n                    </div>\r\n                    <div className=\"form-group col-md-12\">\r\n                        <label htmlFor=\"inputGroupSelect02\">Miasto</label>\r\n                        <select className=\"custom-select\" id=\"inputGroupSelect02\" onChange={changeFltCity} value={fltCity}>\r\n                            <option value=\"wroclaw\">Wrocław</option>\r\n                            <option value=\"warszawa\">Warszawa</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group col-md-12\">\r\n                        <label>Bateria w samochodach w %</label>\r\n                        <div className=\"input-group\">\r\n                            <div className=\"form-control\">{fltBatteryPercentage}</div>\r\n                            <div className=\"input-group-append\">\r\n                                <span className=\"input-group-text\">%</span>\r\n                                <button className=\"btn btn-outline-secondary\" onClick={() => setFltBattery(+1)} type=\"button\">+ 1</button>\r\n                                <button className=\"btn btn-outline-secondary\" onClick={() => setFltBattery(-1)} type=\"button\">- 1</button>\r\n                            </div>\r\n                            <input type=\"range\" className=\"custom-range\" onChange={onBatteryRangeChange} defaultValue={fltBatteryPercentage} min=\"0\" max=\"100\" step=\"1\" id=\"customRange3\"></input>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group col-md-12\">\r\n                        <label htmlFor=\"inputGroupSelect01\">Dostępność samochodów</label>\r\n                        <select className=\"custom-select\" id=\"inputGroupSelect01\" onChange={changeFltStatus} value={fltStatus}>\r\n                            <option value=\"AVAILABLE\">Dostępne</option>\r\n                            <option value=\"UNAVAILABLE\">Niedostepne</option>\r\n                            <option value=\"0\">Wszystkie</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group col-md-12\">\r\n                        <div className=\"custom-control custom-switch\">\r\n                            <input className=\"custom-control-input\" onChange={e => handlePoiChange(e)} type=\"checkbox\" id=\"poiCheck\" />\r\n                            <label className=\"custom-control-label\" htmlFor=\"poiCheck\">\r\n                                Pokaż: Miejsca POI\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group col-md-12\">\r\n                        <div className=\"custom-control custom-switch\">\r\n                            <input className=\"custom-control-input\" onChange={e => handleCarparksChange(e)} type=\"checkbox\" id=\"carparksCheck\" />\r\n                            <label className=\"custom-control-label\" htmlFor=\"carparksCheck\">\r\n                                Pokaż: Parkingi\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapFilters;","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport Map from \"./components/Map\";\nimport MapFilters from \"./components/MapFilters\";\n// import MyProvider from \"./components/MyProvider\";\nimport './App.css';\nimport './assets/Layout.css';\nimport './assets/BtnToggle.css';\nimport './assets/bootswatch/cyborg/bootstrap.min.css';\nimport 'leaflet/dist/leaflet.css';\nimport './assets/LeafletCluster.css';\n\nfunction App() {\n    const [cars, setCars] = useState();\n    const [fCars, setFCars] = useState();\n    const [filter, setFilter] = useState({ batteryPercentage: false, status: 0, carparks: false, poi: false, city: 'wroclaw' });\n    const [POI, setPOI] = useState();\n    const [fPOI, setFPOI] = useState();\n    const [carparks, setCarparks] = useState();\n    const [fCarparks, setFCarparks] = useState();\n    const [sidebarClass, setSidebarClass] = useState('open');\n\n    useEffect(() => {\n        let filteredCars = cars;\n\n        // Filter by BATTERY PERCENTAGE\n        if (filter.batteryPercentage !== false && cars) {\n            filteredCars = filteredCars.filter(\n                /** @param {Car} car - Car Object */\n                function (car) {\n                    return car.batteryLevelPct >= filter.batteryPercentage\n                });\n        }\n\n        // Filter by STATUS\n        if (filter.status && filter.status !== '0' && cars) {\n            filteredCars = filteredCars.filter(\n                /** @param {Car} car - Car Object */\n                function (car) {\n                    let PATTERN = new RegExp('^' + filter.status + '$');\n                    return PATTERN.test(car.status);\n                });\n        }\n\n        // Carparks points switch\n        setFCarparks( (!filter.carparks) ? false : carparks );\n        \n        // POI points switch\n        setFPOI( (!filter.poi) ? false : POI );\n\n        if (filteredCars) {\n            setFCars(filteredCars);\n        }\n\n    }, [filter, POI, carparks, cars]);\n\n    useEffect(() => {\n        let carsEndpoint = (process.env.NODE_ENV === 'development') ? 'mockup-data/map-cars.json' : 'https://kamilnowak.com/github/carsmap/mockup-data/api.php?data=cars';\n        let carparksEndpoint = (process.env.NODE_ENV === 'development') ? 'mockup-data/map-carparks.json' : 'https://kamilnowak.com/github/carsmap/mockup-data/api.php?data=carparks';\n        let poiEndpoint = (process.env.NODE_ENV === 'development') ? 'mockup-data/map-poi.json' : 'https://kamilnowak.com/github/carsmap/mockup-data/api.php?data=poi';\n        axios.get(carsEndpoint).then(({ data }) => { setFCars(data.objects); setCars(data.objects); });\n        axios.get(poiEndpoint).then(({ data }) => { setFPOI(data.objects); setPOI(data.objects); });\n        axios.get(carparksEndpoint).then(({ data }) => { setFCarparks(data.objects); setCarparks(data.objects); });\n    }, []);\n\n    const toggleSidebar = (e) => {\n        e.preventDefault();\n        if (sidebarClass === ''){\n            setSidebarClass('open')\n        } else {\n            setSidebarClass('')\n        }\n    }\n\n    return cars ? (\n        <div className=\"layout\">\n            <div className={'layout-sidebar '+sidebarClass}>\n                <div className={'menu-left-part '+sidebarClass}>\n                    <MapFilters onChangeFilter={setFilter} />\n                </div>\n                <div className=\"menu-right-part\">\n                    <div className=\"toggle-holder\">\n                        <div id=\"toggle\" className={sidebarClass} onClick={toggleSidebar}><div className=\"menu-line\"></div></div>\n                    </div>\n                </div>\n            </div>\n            <div className={'layout-content '+sidebarClass}>\n                <Map points={fCars} centerOncity={filter.city} carParkPoints={fCarparks} POIpoints={fPOI} mapFilter={filter} />\n            </div>\n        </div>\n    ) : (\n        <div>Loading...</div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}